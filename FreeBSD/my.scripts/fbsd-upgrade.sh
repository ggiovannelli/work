#!/bin/sh

# FreeBSD Complete Upgrade Script
# Combines fbsd-1st-upg and fbsd-2nd-upg in a single script

# Get script name
SCRIPT_NAME=$(basename "$0")
SCRIPT_PATH=$(realpath "$0")

# Set environment variables
export ASSUME_ALWAYS_YES=YES
export PAGER=/bin/cat

# ========================================
# COMMAND CONFIGURATION
# ========================================

# Commands for STEP 1 (TARGET_RELEASE will be replaced)
PHASE1_CMDS='
yes | freebsd-update upgrade -r "TARGET_RELEASE"
freebsd-update install
'

# Commands for STEP 2
PHASE2_CMDS='
freebsd-update install
fetch -o- https://fbsdupdate.estracom.it/free/upd-fbsd-pkgs | sh
freebsd-update install
'

# ========================================
# END CONFIGURATION
# ========================================

# Function to clean up rc.local
cleanup_rc_local() {
    if [ -f /etc/rc.local ]; then
        # Remove auto-generated lines
        sed -i.tmp '/# AUTO-GENERATED BY fbsd-upgrade/,/# END AUTO-GENERATED SECTION/d' /etc/rc.local
        rm -f /etc/rc.local.tmp
        
        # If rc.local is empty or contains only spaces, remove it
        if [ ! -s /etc/rc.local ] || ! grep -q '[^[:space:]]' /etc/rc.local; then
            rm -f /etc/rc.local
            # Restore backup if it exists and was the only content
            if [ -f /etc/rc.local.fbsd-upgrade-backup ]; then
                mv /etc/rc.local.fbsd-upgrade-backup /etc/rc.local
            fi
        else
            # Remove backup if rc.local has other content
            rm -f /etc/rc.local.fbsd-upgrade-backup
        fi
    fi
}

# Function for step 1
phase1_upgrade() {
    TARGET_RELEASE=$1
    
    echo "========================================="
    echo "FreeBSD Upgrade - STEP 1"
    echo "Target: $TARGET_RELEASE"
    echo "========================================="
    echo ""
    
    # Replace TARGET_RELEASE in commands
    PHASE1_CMDS_EXEC=$(echo "$PHASE1_CMDS" | sed "s/TARGET_RELEASE/$TARGET_RELEASE/g")
    
    # Command counter
    cmd_num=1
    
    # Execute each command
    echo "$PHASE1_CMDS_EXEC" | while IFS= read -r cmd; do
        # Skip empty lines
        if [ -z "$cmd" ] || [ -z "$(echo "$cmd" | tr -d '[:space:]')" ]; then
            continue
        fi
        
        echo ""
        echo "==> Executing command $cmd_num: $cmd"
        
        # Execute the command
        eval "$cmd"
        if [ $? -ne 0 ]; then
            echo ""
            echo "==============================================="
            echo "ERROR: Command failed: $cmd"
            echo "==============================================="
            echo ""
            echo "FreeBSD upgrade STEP 1 has been interrupted."
            exit 1
        fi
        
        cmd_num=$((cmd_num + 1))
    done
    
    # Check if the loop exited with error
    if [ $? -ne 0 ]; then
        exit 1
    fi
    
    # Save state for step 2
    echo "$TARGET_RELEASE" > /var/db/fbsd-upgrade-release
    touch /var/db/fbsd-upgrade-phase2-pending
    
    # Configure automatic execution of step 2 after reboot
    echo ""
    echo "==> Configuring automatic step 2 execution..."
    
    # Backup rc.local if it exists
    if [ -f /etc/rc.local ]; then
        cp /etc/rc.local /etc/rc.local.fbsd-upgrade-backup
    fi
    
    # Add entry for step 2
    cat >> /etc/rc.local << EOF

# AUTO-GENERATED BY fbsd-upgrade - DO NOT EDIT THIS SECTION
# This will be automatically removed after completion
if [ -f /var/db/fbsd-upgrade-phase2-pending ]; then
    echo "==> Automatic execution of FreeBSD upgrade step 2..."
    $SCRIPT_PATH step2 --auto-run
fi
# END AUTO-GENERATED SECTION

EOF
    
    # Make sure rc.local is executable
    chmod +x /etc/rc.local
    
    echo "==> STEP 1 completed. System will be rebooted."
    echo "==> Step 2 will run automatically after reboot."
    echo ""
    echo "Rebooting in 5 seconds... (Ctrl+C to cancel)"
    sleep 5
    reboot
}

# Function for step 2
phase2_upgrade() {
    # Check if called with --auto-run
    AUTO_RUN=0
    if [ "$1" = "--auto-run" ]; then
        AUTO_RUN=1
    fi
    
    echo "========================================="
    echo "FreeBSD Upgrade - STEP 2"
    echo "========================================="
    echo ""
    
    # Check if step 1 was completed
    if [ ! -f /var/db/fbsd-upgrade-phase2-pending ]; then
        echo "WARNING: Step 1 does not appear to have been completed."
        if [ $AUTO_RUN -eq 0 ]; then
            echo "Continue anyway? (y/n)"
            read -r answer
            if [ "$answer" != "y" ] && [ "$answer" != "Y" ]; then
                exit 1
            fi
        else
            echo "Automatic execution cancelled: step 1 not completed."
            exit 1
        fi
    fi
    
    # Command counter
    cmd_num=1
    
    # Execute each command
    echo "$PHASE2_CMDS" | while IFS= read -r cmd; do
        # Skip empty lines
        if [ -z "$cmd" ] || [ -z "$(echo "$cmd" | tr -d '[:space:]')" ]; then
            continue
        fi
        
        echo ""
        echo "==> Executing command $cmd_num: $cmd"
        
        # Execute the command
        eval "$cmd"
        if [ $? -ne 0 ]; then
            echo ""
            echo "==============================================="
            echo "ERROR: Command failed: $cmd"
            echo "==============================================="
            echo ""
            echo "FreeBSD upgrade has been interrupted."
            echo ""
            echo "REQUIRED ACTIONS:"
            echo "1. Resolve the issue that caused the error"
            echo "2. Run manually: $SCRIPT_NAME step2"
            echo "3. Or complete the following commands manually:"
            echo ""
            echo "--- REMAINING COMMANDS ---"
            echo "$cmd"
            echo "$PHASE2_CMDS" | tail -n +$((cmd_num + 1)) | while IFS= read -r remaining_cmd; do
                if [ -n "$remaining_cmd" ] && [ -n "$(echo "$remaining_cmd" | tr -d '[:space:]')" ]; then
                    echo "$remaining_cmd"
                fi
            done
            echo "--- END COMMANDS ---"
            echo ""
            
            # Clean rc.local to avoid infinite loops
            echo "==> Cleaning automatic configuration to avoid loops..."
            cleanup_rc_local
            
            # DO NOT remove state files so user can retry with step2
            echo ""
            echo "Note: State files have been kept."
            echo "      You can retry with: $SCRIPT_NAME step2"
            echo ""
            
            exit 1
        fi
        
        cmd_num=$((cmd_num + 1))
    done
    
    # Check if the loop exited with error
    if [ $? -ne 0 ]; then
        exit 1
    fi
    
    # Remove state files
    rm -f /var/db/fbsd-upgrade-phase2-pending
    rm -f /var/db/fbsd-upgrade-release
    
    # Remove entry from rc.local
    echo ""
    echo "==> Cleaning automatic configuration..."
    cleanup_rc_local
    
    echo ""
    echo "==> STEP 2 completed. System should be rebooted."
    echo ""
    echo "Rebooting in 5 seconds... (Ctrl+C to cancel)"
    sleep 5
    reboot
}

# Help function
show_help() {
    echo "Usage: $SCRIPT_NAME <command> [options]"
    echo ""
    echo "Commands:"
    echo "  step1 <release>  - Execute upgrade step 1"
    echo "  step2            - Execute upgrade step 2"
    echo "  auto <release>   - Execute the appropriate step automatically"
    echo "  help             - Show this help message"
    echo ""
    echo "Examples:"
    echo "  $SCRIPT_NAME step1 14.0-RELEASE"
    echo "  $SCRIPT_NAME step2"
    echo "  $SCRIPT_NAME auto 14.0-RELEASE"
}

# Auto function that determines which step to execute
auto_upgrade() {
    if [ -f /var/db/fbsd-upgrade-phase2-pending ]; then
        echo "==> Step 2 pending detected, continuing with step 2..."
        phase2_upgrade
    else
        if [ $# -eq 0 ]; then
            echo "ERROR: Please specify target release for step 1"
            echo "Usage: $SCRIPT_NAME auto <release>"
            exit 1
        fi
        phase1_upgrade "$1"
    fi
}

# Main
case "$1" in
    step1)
        if [ $# -lt 2 ]; then
            echo "ERROR: Please specify target release"
            echo "Usage: $SCRIPT_NAME step1 <release>"
            exit 1
        fi
        phase1_upgrade "$2"
        ;;
    step2)
        shift
        phase2_upgrade "$@"
        ;;
    auto)
        shift
        auto_upgrade "$@"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        # If a release is passed directly, assume "auto"
        if [ $# -eq 1 ] && echo "$1" | grep -q "RELEASE\|CURRENT\|STABLE"; then
            auto_upgrade "$1"
        else
            show_help
            exit 1
        fi
        ;;
esac
