#!/bin/sh

# ver. 20240310120000

helpFunction()
{
    echo
    echo "Sintassi: $0 [-y] [-e openssl|crypt] [-k key | -j ] [-b xxd|b64|uue] [-w 56] [-d \"free note\"] files1 files2 ..."
    echo " -y ask confirmations when extract."
    echo " -e use encryption    Default openssl"
    echo " -k encryption key    -j to ask for it"
    echo " -b change hexdumper  Default xxd or base64|uuencode"
    echo " -w octets per line   Default 56"
    echo " -d text description"
    echo
    echo "Some examples:"
    echo "$0 -j /root /etc/ssh/sshd_config           (archive both path, crypt them with openssl)"
    echo "$0 -j -e crypt /root /etc/ssh/sshd_config  (archive both path, crypt them with crypt/enigma)"
    echo "$0 -k \"my b35t P4ssw0rd\" /root           (archive /root, crypt with openssl and key on cmdline)"
    echo "$0 /root /etc/ssh/sshd_config              (archive both path, NO encryption)"
    echo "$0 -y /root /etc/ssh/sshd_config           (same as above but ask confirmation before writing)"
    echo "$0 -b b64 -w 40 /root                      (archive /root, NO crypt, hexdumper base64, 80 col)"
    echo
    exit 1
}


readKey()
{
    echo
    read -p "Enter key: " KEY
    KEY="\"${KEY}\" |"
    echo
}

# initialize some DEFAULTS
SAFE=""
KEY=""
DESC=""
WIDTH=56

HEX="xxd"
HEXC="xxd -p -c "
HEXD="xxd -p -r "

while getopts "h:j:y:e:k:w:d:b:" flag
do
        case "${flag}" in

                y)  SAFE="w"
                    shift 1;;

                k)  KEY=${OPTARG}
                    KEY="\"${KEY}\" |"
                    shift 2;;

                e)  ENC=${OPTARG}
                    if [ "${ENC}" == "crypt" ]
                    then
                        CRYPT="crypt"
                        DECRYPT="crypt |"
                    else
                        ENC="openssl"
                        CRYPT="openssl enc -e -base64 -aes-128-ctr -nosalt -pbkdf2 -k"
                        DECRYPT="openssl enc -d -base64 -aes-128-ctr -nosalt -pbkdf2 |"
                        echo "- crypt defaults to openssl"
                    fi
                    shift 2;;

                j)  readKey
                    shift 1;;

                w)  WIDTH=${OPTARG}
                    shift 2;;

                d)  DESC=${OPTARG}
                    shift 2;;

                b)  HEX=${OPTARG}
                    if [ "${HEX}" == "b64" ]
                    then
                        HEXC="base64 -w"
                        HEXD="base64 -d"
                    elif [ "${HEX}" == "uue" ]
                    then
                        HEXC="uuencode -m archive.tgz"
                        HEXD="uudecode -o /dev/stdout"
                    else [ "${HEX}" == "xxd" ]
                        HEXC="xxd -p -c "
                        HEXD="xxd -p -r "
                        echo
                        echo "- hexdumper defaults to xxd"
                    fi
                    shift 2;;

                h)  helpFunction;;

                ?)  helpFunction;;
        esac
done

if ( [ ! -z "${SAFE}" ] && [ $# -lt 1 ] ) || ( [ ! -z "${KEY}" ] && [ $# -lt 1 ] ) || ( [ ! -z "${DESC}" ] && [ $# -lt 1 ] ) || [ $# -lt 1 ]
then
    helpFunction
fi

if [ ! -z "${DESC}" ]
then
    DESC=\'"${DESC}"\'
fi

# Fix for different width lenghts
case ${HEX} in
    "b64") WIDTH=`expr ${WIDTH} \* 2`;;
    "uue") WIDTH=""
esac

# We have setup a KEY but not an ENC so default it to openssl
if [ ! -z "${KEY}" ] && [ -z "${ENC}" ]
then
    ENC="openssl"
    CRYPT="openssl enc -e -base64 -aes-128-ctr -nosalt -pbkdf2 -k"
    DECRYPT="openssl enc -d -base64 -aes-128-ctr -nosalt -pbkdf2 |"
fi

# We have the ENC but not the KEY. Read one.
if [ -z "${KEY}" ] && [ ! -z "${ENC}" ]
then
    readKey
fi

echo : $(date '+%Y.%m.%d-%H:%M:%S') $(hostname) ${DESC} $@
CMD="( tar -cpPf - $@ | gzip -9 | ${CRYPT} ${KEY} ${HEXC} ${WIDTH} ) 2>/dev/null | awk -v SAFE=${SAFE} 'BEGIN {printf(\"( ${HEXD} | ${DECRYPT} tar -%szxPpvf - ) <<EOF\n\"), SAFE} {print} END { printf(\"EOF\n\")}'"
eval ${CMD}
